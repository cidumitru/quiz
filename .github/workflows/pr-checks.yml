name: PR Quality Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_REJECT_UNKNOWN_LOCAL_CACHE: '0'

jobs:
  setup:
    name: Setup and Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.affected.outputs.apps }}
      affected-libs: ${{ steps.affected.outputs.libs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Derive appropriate SHAs for base and head
        uses: nrwl/nx-set-shas@v4

      - name: Determine affected projects
        id: affected
        run: |
          echo "apps=$(npx nx show projects --affected --type=app --json)" >> $GITHUB_OUTPUT
          echo "libs=$(npx nx show projects --affected --type=lib --json)" >> $GITHUB_OUTPUT

#  lint:
#    name: Lint Code
#    runs-on: ubuntu-latest
#    needs: setup
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Restore Nx cache
#        uses: actions/cache@v4
#        with:
#          path: .nx/cache
#          key: nx-${{ runner.os }}-${{ github.sha }}
#          restore-keys: |
#            nx-${{ runner.os }}-
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Derive appropriate SHAs
#        uses: nrwl/nx-set-shas@v4
#
#      - name: Run linting on affected projects
#        run: npx nx affected --target=lint --parallel=3
#
#      - name: Check code formatting
#        run: npx nx format:check

  typecheck:
    name: TypeScript Compilation
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compilation check
        run: npx nx run-many --target=typecheck --all --parallel=3

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-
      - name: Install dependencies
        run: npm ci
      - name: Derive appropriate SHAs
        uses: nrwl/nx-set-shas@v4
      - name: Run unit tests on affected projects
        run: npx nx affected --target=test --parallel=3 --coverage
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7
      - name: Comment PR with coverage
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            let coverageComment = '## 📊 Test Coverage Report\n\n';
            const coverageDirs = ['coverage/apps/aqb', 'coverage/apps/api'];
            for (const dir of coverageDirs) {
              const coverageFile = path.join(dir, 'coverage-summary.json');
              if (fs.existsSync(coverageFile)) {
                const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
                const total = coverage.total;
                const projectName = dir.split('/').pop();
                coverageComment += `### ${projectName}\n`;
                coverageComment += `| Metric | Coverage | Covered/Total |\n`;
                coverageComment += `|--------|----------|---------------|\n`;
                coverageComment += `| Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |\n`;
                coverageComment += `| Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |\n`;
                coverageComment += `| Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |\n`;
                coverageComment += `| Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |\n\n`;
              }
            }
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Test Coverage Report')
            );
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: coverageComment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageComment
              });
            }

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [setup, test]
    strategy:
      matrix:
        project: [aqb, api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: nx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nx-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.project }}
        run: npx nx build ${{ matrix.project }} --configuration=production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.project }}
          path: dist/apps/${{ matrix.project }}
          retention-days: 7

      - name: Analyze bundle size
        if: matrix.project == 'aqb'
        run: |
          echo "## Bundle Size Analysis for ${{ matrix.project }}" >> bundle-size.md
          echo "| File | Size |" >> bundle-size.md
          echo "|------|------|" >> bundle-size.md
          find dist/apps/${{ matrix.project }} -name "*.js" -o -name "*.css" | while read file; do
            size=$(ls -lh "$file" | awk '{print $5}')
            filename=$(basename "$file")
            echo "| $filename | $size |" >> bundle-size.md
          done

          # Check if main bundle exceeds budget
          main_bundle=$(find dist/apps/${{ matrix.project }} -name "main*.js" | head -1)
          if [ -f "$main_bundle" ]; then
            size_kb=$(du -k "$main_bundle" | cut -f1)
            if [ $size_kb -gt 500 ]; then
              echo "⚠️ Warning: Main bundle size ($size_kb KB) exceeds recommended size (500 KB)" >> bundle-size.md
            fi
          fi

      - name: Comment PR with bundle size
        if: matrix.project == 'aqb' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const bundleSizeReport = fs.readFileSync('bundle-size.md', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Bundle Size Analysis')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: bundleSizeReport
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: bundleSizeReport
              });
            }

#  e2e:
#    name: E2E Tests
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ env.NODE_VERSION }}
#          cache: 'npm'
#
#      - name: Restore Nx cache
#        uses: actions/cache@v4
#        with:
#          path: .nx/cache
#          key: nx-${{ runner.os }}-${{ github.sha }}
#          restore-keys: |
#            nx-${{ runner.os }}-
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Install Playwright browsers
#        run: npx playwright install --with-deps chromium
#
#      - name: Download build artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: build-aqb
#          path: dist/apps/aqb
#
#      - name: Run E2E tests
#        run: npx nx e2e aqb-e2e
#
#      - name: Upload Playwright report
#        uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: playwright-report
#          path: dist/.playwright/
#          retention-days: 7

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: |
          npx audit-ci --moderate
        continue-on-error: true

  pr-status:
    name: PR Status Check
    runs-on: ubuntu-latest
    if: always()
    needs: [typecheck, build]
    steps:
      - name: Check all job statuses
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};
            const failed = Object.entries(needs).filter(([job, status]) =>
              status.result === 'failure'
            );

            if (failed.length > 0) {
              const failedJobs = failed.map(([job]) => job).join(', ');
              core.setFailed(`The following jobs failed: ${failedJobs}`);
            } else {
              console.log('All quality checks passed! ✅');
            }

      - name: Comment final status on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};
            let statusComment = '## 🔍 PR Quality Check Summary\n\n';

            const statusEmoji = {
              'success': '✅',
              'failure': '❌',
              'cancelled': '⚠️',
              'skipped': '⏭️'
            };

            statusComment += '| Check | Status |\n';
            statusComment += '|-------|--------|\n';

            for (const [job, status] of Object.entries(needs)) {
              const emoji = statusEmoji[status.result] || '❓';
              const jobName = job.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
              statusComment += `| ${jobName} | ${emoji} ${status.result} |\n`;
            }

            const allPassed = Object.values(needs).every(status => status.result === 'success');

            if (allPassed) {
              statusComment += '\n### ✅ All checks passed! Ready for review.';
            } else {
              statusComment += '\n### ❌ Some checks failed. Please review the errors above.';
            }

            statusComment += '\n\n*Last updated: ' + new Date().toISOString() + '*';

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('PR Quality Check Summary')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: statusComment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: statusComment
              });
            }
